#!/usr/bin/env python3
"""
Script to load raw attention analysis data and recreate the unnormalized attention evolution plot.
This script loads data saved by plot_attention_across_epochs.py and regenerates the visualization.
"""

import argparse
import json
import numpy as np
import matplotlib.pyplot as plt
import os


def load_raw_data(data_file):
    """Load the raw attention analysis data from JSON file."""
    print(f"Loading raw data from {data_file}")
    
    if not os.path.exists(data_file):
        raise FileNotFoundError(f"Raw data file not found: {data_file}")
    
    with open(data_file, 'r') as f:
        raw_data = json.load(f)
    
    return raw_data


def create_attention_plot(raw_data, output_filename=None):
    """Create the unnormalized attention evolution plot from raw data."""
    
    # Extract data from the loaded JSON
    all_results = raw_data['all_results']
    epochs_analyzed = raw_data['epochs_analyzed']
    steps = raw_data['steps']
    
    # Convert string keys back to integers if needed
    if all_results and isinstance(list(all_results.keys())[0], str):
        all_results = {int(k): v for k, v in all_results.items()}
    
    # Ensure epochs are sorted
    epochs_analyzed = sorted(epochs_analyzed)
    
    print(f"Creating plot for {len(epochs_analyzed)} epochs and {len(steps)} steps")
    print(f"Epochs: {epochs_analyzed}")
    print(f"Steps: {steps}")
    
    # Create the plot
    plt.figure(figsize=(10, 3))
    
    # Define colors for different steps
    colors = ['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#6A994E', '#7209B7']
    
    # Plot each step with different colors
    for i, step in enumerate(steps):
        color = colors[i % len(colors)]
        
        # Extract data for this step
        frontier_attentions = []
        other_attentions = []
        
        for epoch in epochs_analyzed:
            # print(all_results[epoch].keys())
            step_data = all_results[epoch][str(step)]
            frontier_attentions.append(step_data['mean_frontier_attention'])
            other_attentions.append(step_data['mean_other_attention'])
        
        # Calculate the difference (frontier - other)
        attention_differences = [f - o for f, o in zip(frontier_attentions, other_attentions)]
        
        # Plot the difference
        plt.plot(epochs_analyzed, attention_differences, 'o-', linewidth=2, markersize=8, 
                 label=f'c={step+1}', color=color)
    
    plt.xlabel('Training Epoch', fontsize=12)
    plt.ylabel('Average Attention Difference', fontsize=12)
    # plt.title('Attention Difference between Frontier and Other Edges', 
    #           fontsize=14, fontweight='bold')
    plt.legend(fontsize=10, loc='lower right')
    plt.grid(True, alpha=0.3)
    
    # Set x-axis ticks to only show analyzed epochs
    plt.xticks(epochs_analyzed)
    
    plt.tight_layout()
    
    # Determine output filename
    if output_filename is None:
        # Create default filename based on metadata
        if 'checkpoint_dir' in raw_data:
            checkpoint_name = os.path.basename(raw_data['checkpoint_dir'].rstrip('/'))
            output_filename = f"unnormalized_attention_evolution_{checkpoint_name}_from_raw.pdf"
        else:
            output_filename = "unnormalized_attention_evolution_from_raw.pdf"
    
    plt.savefig(output_filename, dpi=300, bbox_inches='tight')
    print(f"Plot saved as {output_filename}")
    
    return output_filename


def print_summary(raw_data):
    """Print summary statistics from the raw data."""
    all_results = raw_data['all_results']
    epochs_analyzed = raw_data['epochs_analyzed']
    steps = raw_data['steps']
    
    # Convert string keys back to integers if needed
    if all_results and isinstance(list(all_results.keys())[0], str):
        all_results = {int(k): v for k, v in all_results.items()}
        epochs_analyzed = [int(e) for e in epochs_analyzed]
    
    epochs_analyzed = sorted(epochs_analyzed)
    
    print(f"\n=== SUMMARY (from raw data) ===")
    print(f"Epochs analyzed: {epochs_analyzed}")
    print(f"Steps analyzed: {steps}")
    
    if 'analysis_metadata' in raw_data:
        metadata = raw_data['analysis_metadata']
        print(f"Original analysis generated by: {metadata.get('generated_by', 'unknown')}")
        print(f"Data source: {raw_data.get('test_file', 'unknown')}")
        print(f"Checkpoint directory: {raw_data.get('checkpoint_dir', 'unknown')}")
        print(f"Max samples per epoch: {raw_data.get('max_samples', 'unknown')}")
    
    # Calculate trends for each step
    for step in steps:
        frontier_attentions = [all_results[epoch][step]['mean_frontier_attention'] for epoch in epochs_analyzed]
        other_attentions = [all_results[epoch][step]['mean_other_attention'] for epoch in epochs_analyzed]
        
        if len(frontier_attentions) >= 2:
            # Calculate attention differences
            attention_differences = [f - o for f, o in zip(frontier_attentions, other_attentions)]
            difference_trend = "increasing" if attention_differences[-1] > attention_differences[0] else "decreasing"
            
            print(f"\nStep {step}:")
            print(f"  Attention difference (frontier - other) trend: {difference_trend} ({attention_differences[0]:.4f} → {attention_differences[-1]:.4f})")
            
            # Also show the individual components for context
            frontier_trend = "increasing" if frontier_attentions[-1] > frontier_attentions[0] else "decreasing"
            other_trend = "increasing" if other_attentions[-1] > other_attentions[0] else "decreasing"
            print(f"  Frontier edge attention: {frontier_trend} ({frontier_attentions[0]:.4f} → {frontier_attentions[-1]:.4f})")
            print(f"  Other edge attention: {other_trend} ({other_attentions[0]:.4f} → {other_attentions[-1]:.4f})")
            
            # Calculate attention ratio evolution
            ratios = [f/o if o > 0 else 0 for f, o in zip(frontier_attentions, other_attentions)]
            if ratios:
                print(f"  Attention ratio (frontier/other) evolution: {ratios[0]:.2f}x → {ratios[-1]:.2f}x")


def main():
    parser = argparse.ArgumentParser(description="Plot unnormalized attention evolution from saved raw data")
    parser.add_argument("raw_data_file", 
                       help="Path to the JSON file containing raw attention analysis data")
    parser.add_argument("--output", default=None,
                       help="Output plot filename (if not specified, auto-generated based on data)")
    parser.add_argument("--show", action="store_true",
                       help="Display the plot interactively")
    parser.add_argument("--summary-only", action="store_true",
                       help="Only print summary without creating plot")
    
    args = parser.parse_args()
    
    # Load the raw data
    try:
        raw_data = load_raw_data(args.raw_data_file)
    except FileNotFoundError as e:
        print(f"Error: {e}")
        return 1
    except json.JSONDecodeError as e:
        print(f"Error: Invalid JSON file: {e}")
        return 1
    
    # Print summary
    # print_summary(raw_data)
    
    # Create plot unless summary-only is requested
    if not args.summary_only:
        output_filename = create_attention_plot(raw_data, args.output)
        
        # Show plot if requested
        if args.show:
            plt.show()
    
    return 0


if __name__ == "__main__":
    exit(main())
